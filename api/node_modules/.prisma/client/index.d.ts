
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Libros
 * 
 */
export type Libros = {
  Sinatura: number
  Titulo: string
  Autor: string | null
  Editorial: string
  Anno_de_Publicacion: number | null
  Disponibilidad: boolean | null
}

/**
 * Model Pedidos
 * 
 */
export type Pedidos = {
  Id: number
  Id_Usuario: number
  Libro_prestado: number
  Fecha_Pedido: Date
  Fecha_Devolucion: Date
}

/**
 * Model Usuario
 * 
 */
export type Usuario = {
  Id: number
  nombre: string
  apellidos: string
  DNI: string
  Telefono: number
  Fecha_de_alta: Date
  Clave_de_acceso: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Libros
 * const libros = await prisma.libros.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Libros
   * const libros = await prisma.libros.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.libros`: Exposes CRUD operations for the **Libros** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Libros
    * const libros = await prisma.libros.findMany()
    * ```
    */
  get libros(): Prisma.LibrosDelegate<GlobalReject>;

  /**
   * `prisma.pedidos`: Exposes CRUD operations for the **Pedidos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedidos.findMany()
    * ```
    */
  get pedidos(): Prisma.PedidosDelegate<GlobalReject>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.1
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Libros: 'Libros',
    Pedidos: 'Pedidos',
    Usuario: 'Usuario'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LibrosCountOutputType
   */


  export type LibrosCountOutputType = {
    Pedidos: number
  }

  export type LibrosCountOutputTypeSelect = {
    Pedidos?: boolean
  }

  export type LibrosCountOutputTypeGetPayload<S extends boolean | null | undefined | LibrosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibrosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LibrosCountOutputTypeArgs)
    ? LibrosCountOutputType 
    : S extends { select: any } & (LibrosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LibrosCountOutputType ? LibrosCountOutputType[P] : never
  } 
      : LibrosCountOutputType




  // Custom InputTypes

  /**
   * LibrosCountOutputType without action
   */
  export type LibrosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LibrosCountOutputType
     * 
    **/
    select?: LibrosCountOutputTypeSelect | null
  }



  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    Pedidos: number
  }

  export type UsuarioCountOutputTypeSelect = {
    Pedidos?: boolean
  }

  export type UsuarioCountOutputTypeGetPayload<S extends boolean | null | undefined | UsuarioCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsuarioCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioCountOutputTypeArgs)
    ? UsuarioCountOutputType 
    : S extends { select: any } & (UsuarioCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsuarioCountOutputType ? UsuarioCountOutputType[P] : never
  } 
      : UsuarioCountOutputType




  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     * 
    **/
    select?: UsuarioCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Libros
   */


  export type AggregateLibros = {
    _count: LibrosCountAggregateOutputType | null
    _avg: LibrosAvgAggregateOutputType | null
    _sum: LibrosSumAggregateOutputType | null
    _min: LibrosMinAggregateOutputType | null
    _max: LibrosMaxAggregateOutputType | null
  }

  export type LibrosAvgAggregateOutputType = {
    Sinatura: number | null
    Anno_de_Publicacion: number | null
  }

  export type LibrosSumAggregateOutputType = {
    Sinatura: number | null
    Anno_de_Publicacion: number | null
  }

  export type LibrosMinAggregateOutputType = {
    Sinatura: number | null
    Titulo: string | null
    Autor: string | null
    Editorial: string | null
    Anno_de_Publicacion: number | null
    Disponibilidad: boolean | null
  }

  export type LibrosMaxAggregateOutputType = {
    Sinatura: number | null
    Titulo: string | null
    Autor: string | null
    Editorial: string | null
    Anno_de_Publicacion: number | null
    Disponibilidad: boolean | null
  }

  export type LibrosCountAggregateOutputType = {
    Sinatura: number
    Titulo: number
    Autor: number
    Editorial: number
    Anno_de_Publicacion: number
    Disponibilidad: number
    _all: number
  }


  export type LibrosAvgAggregateInputType = {
    Sinatura?: true
    Anno_de_Publicacion?: true
  }

  export type LibrosSumAggregateInputType = {
    Sinatura?: true
    Anno_de_Publicacion?: true
  }

  export type LibrosMinAggregateInputType = {
    Sinatura?: true
    Titulo?: true
    Autor?: true
    Editorial?: true
    Anno_de_Publicacion?: true
    Disponibilidad?: true
  }

  export type LibrosMaxAggregateInputType = {
    Sinatura?: true
    Titulo?: true
    Autor?: true
    Editorial?: true
    Anno_de_Publicacion?: true
    Disponibilidad?: true
  }

  export type LibrosCountAggregateInputType = {
    Sinatura?: true
    Titulo?: true
    Autor?: true
    Editorial?: true
    Anno_de_Publicacion?: true
    Disponibilidad?: true
    _all?: true
  }

  export type LibrosAggregateArgs = {
    /**
     * Filter which Libros to aggregate.
     * 
    **/
    where?: LibrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libros to fetch.
     * 
    **/
    orderBy?: Enumerable<LibrosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LibrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libros.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Libros
    **/
    _count?: true | LibrosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibrosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibrosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibrosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibrosMaxAggregateInputType
  }

  export type GetLibrosAggregateType<T extends LibrosAggregateArgs> = {
        [P in keyof T & keyof AggregateLibros]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibros[P]>
      : GetScalarType<T[P], AggregateLibros[P]>
  }




  export type LibrosGroupByArgs = {
    where?: LibrosWhereInput
    orderBy?: Enumerable<LibrosOrderByWithAggregationInput>
    by: Array<LibrosScalarFieldEnum>
    having?: LibrosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibrosCountAggregateInputType | true
    _avg?: LibrosAvgAggregateInputType
    _sum?: LibrosSumAggregateInputType
    _min?: LibrosMinAggregateInputType
    _max?: LibrosMaxAggregateInputType
  }


  export type LibrosGroupByOutputType = {
    Sinatura: number
    Titulo: string
    Autor: string | null
    Editorial: string
    Anno_de_Publicacion: number | null
    Disponibilidad: boolean | null
    _count: LibrosCountAggregateOutputType | null
    _avg: LibrosAvgAggregateOutputType | null
    _sum: LibrosSumAggregateOutputType | null
    _min: LibrosMinAggregateOutputType | null
    _max: LibrosMaxAggregateOutputType | null
  }

  type GetLibrosGroupByPayload<T extends LibrosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LibrosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibrosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibrosGroupByOutputType[P]>
            : GetScalarType<T[P], LibrosGroupByOutputType[P]>
        }
      >
    >


  export type LibrosSelect = {
    Sinatura?: boolean
    Titulo?: boolean
    Autor?: boolean
    Editorial?: boolean
    Anno_de_Publicacion?: boolean
    Disponibilidad?: boolean
    Pedidos?: boolean | Libros$PedidosArgs
    _count?: boolean | LibrosCountOutputTypeArgs
  }


  export type LibrosInclude = {
    Pedidos?: boolean | Libros$PedidosArgs
    _count?: boolean | LibrosCountOutputTypeArgs
  } 

  export type LibrosGetPayload<S extends boolean | null | undefined | LibrosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Libros :
    S extends undefined ? never :
    S extends { include: any } & (LibrosArgs | LibrosFindManyArgs)
    ? Libros  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Pedidos' ? Array < PedidosGetPayload<S['include'][P]>>  :
        P extends '_count' ? LibrosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibrosArgs | LibrosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Pedidos' ? Array < PedidosGetPayload<S['select'][P]>>  :
        P extends '_count' ? LibrosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Libros ? Libros[P] : never
  } 
      : Libros


  type LibrosCountArgs = Merge<
    Omit<LibrosFindManyArgs, 'select' | 'include'> & {
      select?: LibrosCountAggregateInputType | true
    }
  >

  export interface LibrosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Libros that matches the filter.
     * @param {LibrosFindUniqueArgs} args - Arguments to find a Libros
     * @example
     * // Get one Libros
     * const libros = await prisma.libros.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibrosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibrosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Libros'> extends True ? Prisma__LibrosClient<LibrosGetPayload<T>> : Prisma__LibrosClient<LibrosGetPayload<T> | null, null>

    /**
     * Find one Libros that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibrosFindUniqueOrThrowArgs} args - Arguments to find a Libros
     * @example
     * // Get one Libros
     * const libros = await prisma.libros.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibrosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibrosFindUniqueOrThrowArgs>
    ): Prisma__LibrosClient<LibrosGetPayload<T>>

    /**
     * Find the first Libros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibrosFindFirstArgs} args - Arguments to find a Libros
     * @example
     * // Get one Libros
     * const libros = await prisma.libros.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibrosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibrosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Libros'> extends True ? Prisma__LibrosClient<LibrosGetPayload<T>> : Prisma__LibrosClient<LibrosGetPayload<T> | null, null>

    /**
     * Find the first Libros that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibrosFindFirstOrThrowArgs} args - Arguments to find a Libros
     * @example
     * // Get one Libros
     * const libros = await prisma.libros.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibrosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibrosFindFirstOrThrowArgs>
    ): Prisma__LibrosClient<LibrosGetPayload<T>>

    /**
     * Find zero or more Libros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibrosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Libros
     * const libros = await prisma.libros.findMany()
     * 
     * // Get first 10 Libros
     * const libros = await prisma.libros.findMany({ take: 10 })
     * 
     * // Only select the `Sinatura`
     * const librosWithSinaturaOnly = await prisma.libros.findMany({ select: { Sinatura: true } })
     * 
    **/
    findMany<T extends LibrosFindManyArgs>(
      args?: SelectSubset<T, LibrosFindManyArgs>
    ): PrismaPromise<Array<LibrosGetPayload<T>>>

    /**
     * Create a Libros.
     * @param {LibrosCreateArgs} args - Arguments to create a Libros.
     * @example
     * // Create one Libros
     * const Libros = await prisma.libros.create({
     *   data: {
     *     // ... data to create a Libros
     *   }
     * })
     * 
    **/
    create<T extends LibrosCreateArgs>(
      args: SelectSubset<T, LibrosCreateArgs>
    ): Prisma__LibrosClient<LibrosGetPayload<T>>

    /**
     * Create many Libros.
     *     @param {LibrosCreateManyArgs} args - Arguments to create many Libros.
     *     @example
     *     // Create many Libros
     *     const libros = await prisma.libros.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibrosCreateManyArgs>(
      args?: SelectSubset<T, LibrosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Libros.
     * @param {LibrosDeleteArgs} args - Arguments to delete one Libros.
     * @example
     * // Delete one Libros
     * const Libros = await prisma.libros.delete({
     *   where: {
     *     // ... filter to delete one Libros
     *   }
     * })
     * 
    **/
    delete<T extends LibrosDeleteArgs>(
      args: SelectSubset<T, LibrosDeleteArgs>
    ): Prisma__LibrosClient<LibrosGetPayload<T>>

    /**
     * Update one Libros.
     * @param {LibrosUpdateArgs} args - Arguments to update one Libros.
     * @example
     * // Update one Libros
     * const libros = await prisma.libros.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibrosUpdateArgs>(
      args: SelectSubset<T, LibrosUpdateArgs>
    ): Prisma__LibrosClient<LibrosGetPayload<T>>

    /**
     * Delete zero or more Libros.
     * @param {LibrosDeleteManyArgs} args - Arguments to filter Libros to delete.
     * @example
     * // Delete a few Libros
     * const { count } = await prisma.libros.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibrosDeleteManyArgs>(
      args?: SelectSubset<T, LibrosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Libros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibrosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Libros
     * const libros = await prisma.libros.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibrosUpdateManyArgs>(
      args: SelectSubset<T, LibrosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Libros.
     * @param {LibrosUpsertArgs} args - Arguments to update or create a Libros.
     * @example
     * // Update or create a Libros
     * const libros = await prisma.libros.upsert({
     *   create: {
     *     // ... data to create a Libros
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Libros we want to update
     *   }
     * })
    **/
    upsert<T extends LibrosUpsertArgs>(
      args: SelectSubset<T, LibrosUpsertArgs>
    ): Prisma__LibrosClient<LibrosGetPayload<T>>

    /**
     * Count the number of Libros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibrosCountArgs} args - Arguments to filter Libros to count.
     * @example
     * // Count the number of Libros
     * const count = await prisma.libros.count({
     *   where: {
     *     // ... the filter for the Libros we want to count
     *   }
     * })
    **/
    count<T extends LibrosCountArgs>(
      args?: Subset<T, LibrosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibrosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Libros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibrosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibrosAggregateArgs>(args: Subset<T, LibrosAggregateArgs>): PrismaPromise<GetLibrosAggregateType<T>>

    /**
     * Group by Libros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibrosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibrosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibrosGroupByArgs['orderBy'] }
        : { orderBy?: LibrosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibrosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibrosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Libros.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibrosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Pedidos<T extends Libros$PedidosArgs= {}>(args?: Subset<T, Libros$PedidosArgs>): PrismaPromise<Array<PedidosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Libros base type for findUnique actions
   */
  export type LibrosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * Filter, which Libros to fetch.
     * 
    **/
    where: LibrosWhereUniqueInput
  }

  /**
   * Libros findUnique
   */
  export interface LibrosFindUniqueArgs extends LibrosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Libros findUniqueOrThrow
   */
  export type LibrosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * Filter, which Libros to fetch.
     * 
    **/
    where: LibrosWhereUniqueInput
  }


  /**
   * Libros base type for findFirst actions
   */
  export type LibrosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * Filter, which Libros to fetch.
     * 
    **/
    where?: LibrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libros to fetch.
     * 
    **/
    orderBy?: Enumerable<LibrosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Libros.
     * 
    **/
    cursor?: LibrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libros.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Libros.
     * 
    **/
    distinct?: Enumerable<LibrosScalarFieldEnum>
  }

  /**
   * Libros findFirst
   */
  export interface LibrosFindFirstArgs extends LibrosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Libros findFirstOrThrow
   */
  export type LibrosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * Filter, which Libros to fetch.
     * 
    **/
    where?: LibrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libros to fetch.
     * 
    **/
    orderBy?: Enumerable<LibrosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Libros.
     * 
    **/
    cursor?: LibrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libros.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Libros.
     * 
    **/
    distinct?: Enumerable<LibrosScalarFieldEnum>
  }


  /**
   * Libros findMany
   */
  export type LibrosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * Filter, which Libros to fetch.
     * 
    **/
    where?: LibrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libros to fetch.
     * 
    **/
    orderBy?: Enumerable<LibrosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Libros.
     * 
    **/
    cursor?: LibrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libros.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LibrosScalarFieldEnum>
  }


  /**
   * Libros create
   */
  export type LibrosCreateArgs = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * The data needed to create a Libros.
     * 
    **/
    data: XOR<LibrosCreateInput, LibrosUncheckedCreateInput>
  }


  /**
   * Libros createMany
   */
  export type LibrosCreateManyArgs = {
    /**
     * The data used to create many Libros.
     * 
    **/
    data: Enumerable<LibrosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Libros update
   */
  export type LibrosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * The data needed to update a Libros.
     * 
    **/
    data: XOR<LibrosUpdateInput, LibrosUncheckedUpdateInput>
    /**
     * Choose, which Libros to update.
     * 
    **/
    where: LibrosWhereUniqueInput
  }


  /**
   * Libros updateMany
   */
  export type LibrosUpdateManyArgs = {
    /**
     * The data used to update Libros.
     * 
    **/
    data: XOR<LibrosUpdateManyMutationInput, LibrosUncheckedUpdateManyInput>
    /**
     * Filter which Libros to update
     * 
    **/
    where?: LibrosWhereInput
  }


  /**
   * Libros upsert
   */
  export type LibrosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * The filter to search for the Libros to update in case it exists.
     * 
    **/
    where: LibrosWhereUniqueInput
    /**
     * In case the Libros found by the `where` argument doesn't exist, create a new Libros with this data.
     * 
    **/
    create: XOR<LibrosCreateInput, LibrosUncheckedCreateInput>
    /**
     * In case the Libros was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LibrosUpdateInput, LibrosUncheckedUpdateInput>
  }


  /**
   * Libros delete
   */
  export type LibrosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
    /**
     * Filter which Libros to delete.
     * 
    **/
    where: LibrosWhereUniqueInput
  }


  /**
   * Libros deleteMany
   */
  export type LibrosDeleteManyArgs = {
    /**
     * Filter which Libros to delete
     * 
    **/
    where?: LibrosWhereInput
  }


  /**
   * Libros.Pedidos
   */
  export type Libros$PedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    where?: PedidosWhereInput
    orderBy?: Enumerable<PedidosOrderByWithRelationInput>
    cursor?: PedidosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }


  /**
   * Libros without action
   */
  export type LibrosArgs = {
    /**
     * Select specific fields to fetch from the Libros
     * 
    **/
    select?: LibrosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LibrosInclude | null
  }



  /**
   * Model Pedidos
   */


  export type AggregatePedidos = {
    _count: PedidosCountAggregateOutputType | null
    _avg: PedidosAvgAggregateOutputType | null
    _sum: PedidosSumAggregateOutputType | null
    _min: PedidosMinAggregateOutputType | null
    _max: PedidosMaxAggregateOutputType | null
  }

  export type PedidosAvgAggregateOutputType = {
    Id: number | null
    Id_Usuario: number | null
    Libro_prestado: number | null
  }

  export type PedidosSumAggregateOutputType = {
    Id: number | null
    Id_Usuario: number | null
    Libro_prestado: number | null
  }

  export type PedidosMinAggregateOutputType = {
    Id: number | null
    Id_Usuario: number | null
    Libro_prestado: number | null
    Fecha_Pedido: Date | null
    Fecha_Devolucion: Date | null
  }

  export type PedidosMaxAggregateOutputType = {
    Id: number | null
    Id_Usuario: number | null
    Libro_prestado: number | null
    Fecha_Pedido: Date | null
    Fecha_Devolucion: Date | null
  }

  export type PedidosCountAggregateOutputType = {
    Id: number
    Id_Usuario: number
    Libro_prestado: number
    Fecha_Pedido: number
    Fecha_Devolucion: number
    _all: number
  }


  export type PedidosAvgAggregateInputType = {
    Id?: true
    Id_Usuario?: true
    Libro_prestado?: true
  }

  export type PedidosSumAggregateInputType = {
    Id?: true
    Id_Usuario?: true
    Libro_prestado?: true
  }

  export type PedidosMinAggregateInputType = {
    Id?: true
    Id_Usuario?: true
    Libro_prestado?: true
    Fecha_Pedido?: true
    Fecha_Devolucion?: true
  }

  export type PedidosMaxAggregateInputType = {
    Id?: true
    Id_Usuario?: true
    Libro_prestado?: true
    Fecha_Pedido?: true
    Fecha_Devolucion?: true
  }

  export type PedidosCountAggregateInputType = {
    Id?: true
    Id_Usuario?: true
    Libro_prestado?: true
    Fecha_Pedido?: true
    Fecha_Devolucion?: true
    _all?: true
  }

  export type PedidosAggregateArgs = {
    /**
     * Filter which Pedidos to aggregate.
     * 
    **/
    where?: PedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pedidos
    **/
    _count?: true | PedidosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidosMaxAggregateInputType
  }

  export type GetPedidosAggregateType<T extends PedidosAggregateArgs> = {
        [P in keyof T & keyof AggregatePedidos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedidos[P]>
      : GetScalarType<T[P], AggregatePedidos[P]>
  }




  export type PedidosGroupByArgs = {
    where?: PedidosWhereInput
    orderBy?: Enumerable<PedidosOrderByWithAggregationInput>
    by: Array<PedidosScalarFieldEnum>
    having?: PedidosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidosCountAggregateInputType | true
    _avg?: PedidosAvgAggregateInputType
    _sum?: PedidosSumAggregateInputType
    _min?: PedidosMinAggregateInputType
    _max?: PedidosMaxAggregateInputType
  }


  export type PedidosGroupByOutputType = {
    Id: number
    Id_Usuario: number
    Libro_prestado: number
    Fecha_Pedido: Date
    Fecha_Devolucion: Date
    _count: PedidosCountAggregateOutputType | null
    _avg: PedidosAvgAggregateOutputType | null
    _sum: PedidosSumAggregateOutputType | null
    _min: PedidosMinAggregateOutputType | null
    _max: PedidosMaxAggregateOutputType | null
  }

  type GetPedidosGroupByPayload<T extends PedidosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PedidosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidosGroupByOutputType[P]>
            : GetScalarType<T[P], PedidosGroupByOutputType[P]>
        }
      >
    >


  export type PedidosSelect = {
    Id?: boolean
    Id_Usuario?: boolean
    Libro_prestado?: boolean
    Fecha_Pedido?: boolean
    Fecha_Devolucion?: boolean
    Libros?: boolean | LibrosArgs
    Usuario?: boolean | UsuarioArgs
  }


  export type PedidosInclude = {
    Libros?: boolean | LibrosArgs
    Usuario?: boolean | UsuarioArgs
  } 

  export type PedidosGetPayload<S extends boolean | null | undefined | PedidosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Pedidos :
    S extends undefined ? never :
    S extends { include: any } & (PedidosArgs | PedidosFindManyArgs)
    ? Pedidos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Libros' ? LibrosGetPayload<S['include'][P]> :
        P extends 'Usuario' ? UsuarioGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PedidosArgs | PedidosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Libros' ? LibrosGetPayload<S['select'][P]> :
        P extends 'Usuario' ? UsuarioGetPayload<S['select'][P]> :  P extends keyof Pedidos ? Pedidos[P] : never
  } 
      : Pedidos


  type PedidosCountArgs = Merge<
    Omit<PedidosFindManyArgs, 'select' | 'include'> & {
      select?: PedidosCountAggregateInputType | true
    }
  >

  export interface PedidosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Pedidos that matches the filter.
     * @param {PedidosFindUniqueArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PedidosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PedidosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pedidos'> extends True ? Prisma__PedidosClient<PedidosGetPayload<T>> : Prisma__PedidosClient<PedidosGetPayload<T> | null, null>

    /**
     * Find one Pedidos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PedidosFindUniqueOrThrowArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PedidosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PedidosFindUniqueOrThrowArgs>
    ): Prisma__PedidosClient<PedidosGetPayload<T>>

    /**
     * Find the first Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosFindFirstArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PedidosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PedidosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pedidos'> extends True ? Prisma__PedidosClient<PedidosGetPayload<T>> : Prisma__PedidosClient<PedidosGetPayload<T> | null, null>

    /**
     * Find the first Pedidos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosFindFirstOrThrowArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PedidosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PedidosFindFirstOrThrowArgs>
    ): Prisma__PedidosClient<PedidosGetPayload<T>>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedidos.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedidos.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const pedidosWithIdOnly = await prisma.pedidos.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends PedidosFindManyArgs>(
      args?: SelectSubset<T, PedidosFindManyArgs>
    ): PrismaPromise<Array<PedidosGetPayload<T>>>

    /**
     * Create a Pedidos.
     * @param {PedidosCreateArgs} args - Arguments to create a Pedidos.
     * @example
     * // Create one Pedidos
     * const Pedidos = await prisma.pedidos.create({
     *   data: {
     *     // ... data to create a Pedidos
     *   }
     * })
     * 
    **/
    create<T extends PedidosCreateArgs>(
      args: SelectSubset<T, PedidosCreateArgs>
    ): Prisma__PedidosClient<PedidosGetPayload<T>>

    /**
     * Create many Pedidos.
     *     @param {PedidosCreateManyArgs} args - Arguments to create many Pedidos.
     *     @example
     *     // Create many Pedidos
     *     const pedidos = await prisma.pedidos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PedidosCreateManyArgs>(
      args?: SelectSubset<T, PedidosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Pedidos.
     * @param {PedidosDeleteArgs} args - Arguments to delete one Pedidos.
     * @example
     * // Delete one Pedidos
     * const Pedidos = await prisma.pedidos.delete({
     *   where: {
     *     // ... filter to delete one Pedidos
     *   }
     * })
     * 
    **/
    delete<T extends PedidosDeleteArgs>(
      args: SelectSubset<T, PedidosDeleteArgs>
    ): Prisma__PedidosClient<PedidosGetPayload<T>>

    /**
     * Update one Pedidos.
     * @param {PedidosUpdateArgs} args - Arguments to update one Pedidos.
     * @example
     * // Update one Pedidos
     * const pedidos = await prisma.pedidos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PedidosUpdateArgs>(
      args: SelectSubset<T, PedidosUpdateArgs>
    ): Prisma__PedidosClient<PedidosGetPayload<T>>

    /**
     * Delete zero or more Pedidos.
     * @param {PedidosDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedidos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PedidosDeleteManyArgs>(
      args?: SelectSubset<T, PedidosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedidos = await prisma.pedidos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PedidosUpdateManyArgs>(
      args: SelectSubset<T, PedidosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedidos.
     * @param {PedidosUpsertArgs} args - Arguments to update or create a Pedidos.
     * @example
     * // Update or create a Pedidos
     * const pedidos = await prisma.pedidos.upsert({
     *   create: {
     *     // ... data to create a Pedidos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedidos we want to update
     *   }
     * })
    **/
    upsert<T extends PedidosUpsertArgs>(
      args: SelectSubset<T, PedidosUpsertArgs>
    ): Prisma__PedidosClient<PedidosGetPayload<T>>

    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedidos.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends PedidosCountArgs>(
      args?: Subset<T, PedidosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidosAggregateArgs>(args: Subset<T, PedidosAggregateArgs>): PrismaPromise<GetPedidosAggregateType<T>>

    /**
     * Group by Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidosGroupByArgs['orderBy'] }
        : { orderBy?: PedidosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pedidos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PedidosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Libros<T extends LibrosArgs= {}>(args?: Subset<T, LibrosArgs>): Prisma__LibrosClient<LibrosGetPayload<T> | Null>;

    Usuario<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pedidos base type for findUnique actions
   */
  export type PedidosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * Filter, which Pedidos to fetch.
     * 
    **/
    where: PedidosWhereUniqueInput
  }

  /**
   * Pedidos findUnique
   */
  export interface PedidosFindUniqueArgs extends PedidosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pedidos findUniqueOrThrow
   */
  export type PedidosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * Filter, which Pedidos to fetch.
     * 
    **/
    where: PedidosWhereUniqueInput
  }


  /**
   * Pedidos base type for findFirst actions
   */
  export type PedidosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * Filter, which Pedidos to fetch.
     * 
    **/
    where?: PedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     * 
    **/
    cursor?: PedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     * 
    **/
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }

  /**
   * Pedidos findFirst
   */
  export interface PedidosFindFirstArgs extends PedidosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pedidos findFirstOrThrow
   */
  export type PedidosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * Filter, which Pedidos to fetch.
     * 
    **/
    where?: PedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     * 
    **/
    cursor?: PedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     * 
    **/
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }


  /**
   * Pedidos findMany
   */
  export type PedidosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * Filter, which Pedidos to fetch.
     * 
    **/
    where?: PedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pedidos.
     * 
    **/
    cursor?: PedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }


  /**
   * Pedidos create
   */
  export type PedidosCreateArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * The data needed to create a Pedidos.
     * 
    **/
    data: XOR<PedidosCreateInput, PedidosUncheckedCreateInput>
  }


  /**
   * Pedidos createMany
   */
  export type PedidosCreateManyArgs = {
    /**
     * The data used to create many Pedidos.
     * 
    **/
    data: Enumerable<PedidosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pedidos update
   */
  export type PedidosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * The data needed to update a Pedidos.
     * 
    **/
    data: XOR<PedidosUpdateInput, PedidosUncheckedUpdateInput>
    /**
     * Choose, which Pedidos to update.
     * 
    **/
    where: PedidosWhereUniqueInput
  }


  /**
   * Pedidos updateMany
   */
  export type PedidosUpdateManyArgs = {
    /**
     * The data used to update Pedidos.
     * 
    **/
    data: XOR<PedidosUpdateManyMutationInput, PedidosUncheckedUpdateManyInput>
    /**
     * Filter which Pedidos to update
     * 
    **/
    where?: PedidosWhereInput
  }


  /**
   * Pedidos upsert
   */
  export type PedidosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * The filter to search for the Pedidos to update in case it exists.
     * 
    **/
    where: PedidosWhereUniqueInput
    /**
     * In case the Pedidos found by the `where` argument doesn't exist, create a new Pedidos with this data.
     * 
    **/
    create: XOR<PedidosCreateInput, PedidosUncheckedCreateInput>
    /**
     * In case the Pedidos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PedidosUpdateInput, PedidosUncheckedUpdateInput>
  }


  /**
   * Pedidos delete
   */
  export type PedidosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    /**
     * Filter which Pedidos to delete.
     * 
    **/
    where: PedidosWhereUniqueInput
  }


  /**
   * Pedidos deleteMany
   */
  export type PedidosDeleteManyArgs = {
    /**
     * Filter which Pedidos to delete
     * 
    **/
    where?: PedidosWhereInput
  }


  /**
   * Pedidos without action
   */
  export type PedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
  }



  /**
   * Model Usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    Id: number | null
    Telefono: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    Id: number | null
    Telefono: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    Id: number | null
    nombre: string | null
    apellidos: string | null
    DNI: string | null
    Telefono: number | null
    Fecha_de_alta: Date | null
    Clave_de_acceso: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    Id: number | null
    nombre: string | null
    apellidos: string | null
    DNI: string | null
    Telefono: number | null
    Fecha_de_alta: Date | null
    Clave_de_acceso: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    Id: number
    nombre: number
    apellidos: number
    DNI: number
    Telefono: number
    Fecha_de_alta: number
    Clave_de_acceso: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    Id?: true
    Telefono?: true
  }

  export type UsuarioSumAggregateInputType = {
    Id?: true
    Telefono?: true
  }

  export type UsuarioMinAggregateInputType = {
    Id?: true
    nombre?: true
    apellidos?: true
    DNI?: true
    Telefono?: true
    Fecha_de_alta?: true
    Clave_de_acceso?: true
  }

  export type UsuarioMaxAggregateInputType = {
    Id?: true
    nombre?: true
    apellidos?: true
    DNI?: true
    Telefono?: true
    Fecha_de_alta?: true
    Clave_de_acceso?: true
  }

  export type UsuarioCountAggregateInputType = {
    Id?: true
    nombre?: true
    apellidos?: true
    DNI?: true
    Telefono?: true
    Fecha_de_alta?: true
    Clave_de_acceso?: true
    _all?: true
  }

  export type UsuarioAggregateArgs = {
    /**
     * Filter which Usuario to aggregate.
     * 
    **/
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs = {
    where?: UsuarioWhereInput
    orderBy?: Enumerable<UsuarioOrderByWithAggregationInput>
    by: Array<UsuarioScalarFieldEnum>
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    Id: number
    nombre: string
    apellidos: string
    DNI: string
    Telefono: number
    Fecha_de_alta: Date
    Clave_de_acceso: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect = {
    Id?: boolean
    nombre?: boolean
    apellidos?: boolean
    DNI?: boolean
    Telefono?: boolean
    Fecha_de_alta?: boolean
    Clave_de_acceso?: boolean
    Pedidos?: boolean | Usuario$PedidosArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }


  export type UsuarioInclude = {
    Pedidos?: boolean | Usuario$PedidosArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  } 

  export type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Usuario :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioArgs | UsuarioFindManyArgs)
    ? Usuario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Pedidos' ? Array < PedidosGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsuarioArgs | UsuarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Pedidos' ? Array < PedidosGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Usuario ? Usuario[P] : never
  } 
      : Usuario


  type UsuarioCountArgs = Merge<
    Omit<UsuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }
  >

  export interface UsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find the first Usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs>(
      args?: SelectSubset<T, UsuarioFindManyArgs>
    ): PrismaPromise<Array<UsuarioGetPayload<T>>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs>(
      args: SelectSubset<T, UsuarioCreateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs>(
      args?: SelectSubset<T, UsuarioCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs>(
      args: SelectSubset<T, UsuarioDeleteArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs>(
      args: SelectSubset<T, UsuarioUpdateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs>(
      args: SelectSubset<T, UsuarioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs>(
      args: SelectSubset<T, UsuarioUpsertArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuarioClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Pedidos<T extends Usuario$PedidosArgs= {}>(args?: Subset<T, Usuario$PedidosArgs>): PrismaPromise<Array<PedidosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuario base type for findUnique actions
   */
  export type UsuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     * 
    **/
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUnique
   */
  export interface UsuarioFindUniqueArgs extends UsuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     * 
    **/
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario base type for findFirst actions
   */
  export type UsuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     * 
    **/
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     * 
    **/
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     * 
    **/
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }

  /**
   * Usuario findFirst
   */
  export interface UsuarioFindFirstArgs extends UsuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     * 
    **/
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     * 
    **/
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     * 
    **/
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuarios to fetch.
     * 
    **/
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     * 
    **/
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * The data needed to create a Usuario.
     * 
    **/
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs = {
    /**
     * The data used to create many Usuarios.
     * 
    **/
    data: Enumerable<UsuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * The data needed to update a Usuario.
     * 
    **/
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     * 
    **/
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs = {
    /**
     * The data used to update Usuarios.
     * 
    **/
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     * 
    **/
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     * 
    **/
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     * 
    **/
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter which Usuario to delete.
     * 
    **/
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs = {
    /**
     * Filter which Usuarios to delete
     * 
    **/
    where?: UsuarioWhereInput
  }


  /**
   * Usuario.Pedidos
   */
  export type Usuario$PedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedidos
     * 
    **/
    select?: PedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosInclude | null
    where?: PedidosWhereInput
    orderBy?: Enumerable<PedidosOrderByWithRelationInput>
    cursor?: PedidosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }


  /**
   * Usuario without action
   */
  export type UsuarioArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const LibrosScalarFieldEnum: {
    Sinatura: 'Sinatura',
    Titulo: 'Titulo',
    Autor: 'Autor',
    Editorial: 'Editorial',
    Anno_de_Publicacion: 'Anno_de_Publicacion',
    Disponibilidad: 'Disponibilidad'
  };

  export type LibrosScalarFieldEnum = (typeof LibrosScalarFieldEnum)[keyof typeof LibrosScalarFieldEnum]


  export const PedidosScalarFieldEnum: {
    Id: 'Id',
    Id_Usuario: 'Id_Usuario',
    Libro_prestado: 'Libro_prestado',
    Fecha_Pedido: 'Fecha_Pedido',
    Fecha_Devolucion: 'Fecha_Devolucion'
  };

  export type PedidosScalarFieldEnum = (typeof PedidosScalarFieldEnum)[keyof typeof PedidosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    Id: 'Id',
    nombre: 'nombre',
    apellidos: 'apellidos',
    DNI: 'DNI',
    Telefono: 'Telefono',
    Fecha_de_alta: 'Fecha_de_alta',
    Clave_de_acceso: 'Clave_de_acceso'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type LibrosWhereInput = {
    AND?: Enumerable<LibrosWhereInput>
    OR?: Enumerable<LibrosWhereInput>
    NOT?: Enumerable<LibrosWhereInput>
    Sinatura?: IntFilter | number
    Titulo?: StringFilter | string
    Autor?: StringNullableFilter | string | null
    Editorial?: StringFilter | string
    Anno_de_Publicacion?: IntNullableFilter | number | null
    Disponibilidad?: BoolNullableFilter | boolean | null
    Pedidos?: PedidosListRelationFilter
  }

  export type LibrosOrderByWithRelationInput = {
    Sinatura?: SortOrder
    Titulo?: SortOrder
    Autor?: SortOrder
    Editorial?: SortOrder
    Anno_de_Publicacion?: SortOrder
    Disponibilidad?: SortOrder
    Pedidos?: PedidosOrderByRelationAggregateInput
  }

  export type LibrosWhereUniqueInput = {
    Sinatura?: number
  }

  export type LibrosOrderByWithAggregationInput = {
    Sinatura?: SortOrder
    Titulo?: SortOrder
    Autor?: SortOrder
    Editorial?: SortOrder
    Anno_de_Publicacion?: SortOrder
    Disponibilidad?: SortOrder
    _count?: LibrosCountOrderByAggregateInput
    _avg?: LibrosAvgOrderByAggregateInput
    _max?: LibrosMaxOrderByAggregateInput
    _min?: LibrosMinOrderByAggregateInput
    _sum?: LibrosSumOrderByAggregateInput
  }

  export type LibrosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibrosScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibrosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibrosScalarWhereWithAggregatesInput>
    Sinatura?: IntWithAggregatesFilter | number
    Titulo?: StringWithAggregatesFilter | string
    Autor?: StringNullableWithAggregatesFilter | string | null
    Editorial?: StringWithAggregatesFilter | string
    Anno_de_Publicacion?: IntNullableWithAggregatesFilter | number | null
    Disponibilidad?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type PedidosWhereInput = {
    AND?: Enumerable<PedidosWhereInput>
    OR?: Enumerable<PedidosWhereInput>
    NOT?: Enumerable<PedidosWhereInput>
    Id?: IntFilter | number
    Id_Usuario?: IntFilter | number
    Libro_prestado?: IntFilter | number
    Fecha_Pedido?: DateTimeFilter | Date | string
    Fecha_Devolucion?: DateTimeFilter | Date | string
    Libros?: XOR<LibrosRelationFilter, LibrosWhereInput>
    Usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type PedidosOrderByWithRelationInput = {
    Id?: SortOrder
    Id_Usuario?: SortOrder
    Libro_prestado?: SortOrder
    Fecha_Pedido?: SortOrder
    Fecha_Devolucion?: SortOrder
    Libros?: LibrosOrderByWithRelationInput
    Usuario?: UsuarioOrderByWithRelationInput
  }

  export type PedidosWhereUniqueInput = {
    Id?: number
  }

  export type PedidosOrderByWithAggregationInput = {
    Id?: SortOrder
    Id_Usuario?: SortOrder
    Libro_prestado?: SortOrder
    Fecha_Pedido?: SortOrder
    Fecha_Devolucion?: SortOrder
    _count?: PedidosCountOrderByAggregateInput
    _avg?: PedidosAvgOrderByAggregateInput
    _max?: PedidosMaxOrderByAggregateInput
    _min?: PedidosMinOrderByAggregateInput
    _sum?: PedidosSumOrderByAggregateInput
  }

  export type PedidosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PedidosScalarWhereWithAggregatesInput>
    OR?: Enumerable<PedidosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PedidosScalarWhereWithAggregatesInput>
    Id?: IntWithAggregatesFilter | number
    Id_Usuario?: IntWithAggregatesFilter | number
    Libro_prestado?: IntWithAggregatesFilter | number
    Fecha_Pedido?: DateTimeWithAggregatesFilter | Date | string
    Fecha_Devolucion?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UsuarioWhereInput = {
    AND?: Enumerable<UsuarioWhereInput>
    OR?: Enumerable<UsuarioWhereInput>
    NOT?: Enumerable<UsuarioWhereInput>
    Id?: IntFilter | number
    nombre?: StringFilter | string
    apellidos?: StringFilter | string
    DNI?: StringFilter | string
    Telefono?: IntFilter | number
    Fecha_de_alta?: DateTimeFilter | Date | string
    Clave_de_acceso?: StringFilter | string
    Pedidos?: PedidosListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    Id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    DNI?: SortOrder
    Telefono?: SortOrder
    Fecha_de_alta?: SortOrder
    Clave_de_acceso?: SortOrder
    Pedidos?: PedidosOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = {
    Id?: number
    DNI?: string
  }

  export type UsuarioOrderByWithAggregationInput = {
    Id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    DNI?: SortOrder
    Telefono?: SortOrder
    Fecha_de_alta?: SortOrder
    Clave_de_acceso?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    Id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    apellidos?: StringWithAggregatesFilter | string
    DNI?: StringWithAggregatesFilter | string
    Telefono?: IntWithAggregatesFilter | number
    Fecha_de_alta?: DateTimeWithAggregatesFilter | Date | string
    Clave_de_acceso?: StringWithAggregatesFilter | string
  }

  export type LibrosCreateInput = {
    Titulo: string
    Autor?: string | null
    Editorial: string
    Anno_de_Publicacion?: number | null
    Disponibilidad?: boolean | null
    Pedidos?: PedidosCreateNestedManyWithoutLibrosInput
  }

  export type LibrosUncheckedCreateInput = {
    Sinatura?: number
    Titulo: string
    Autor?: string | null
    Editorial: string
    Anno_de_Publicacion?: number | null
    Disponibilidad?: boolean | null
    Pedidos?: PedidosUncheckedCreateNestedManyWithoutLibrosInput
  }

  export type LibrosUpdateInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Autor?: NullableStringFieldUpdateOperationsInput | string | null
    Editorial?: StringFieldUpdateOperationsInput | string
    Anno_de_Publicacion?: NullableIntFieldUpdateOperationsInput | number | null
    Disponibilidad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Pedidos?: PedidosUpdateManyWithoutLibrosNestedInput
  }

  export type LibrosUncheckedUpdateInput = {
    Sinatura?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Autor?: NullableStringFieldUpdateOperationsInput | string | null
    Editorial?: StringFieldUpdateOperationsInput | string
    Anno_de_Publicacion?: NullableIntFieldUpdateOperationsInput | number | null
    Disponibilidad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Pedidos?: PedidosUncheckedUpdateManyWithoutLibrosNestedInput
  }

  export type LibrosCreateManyInput = {
    Sinatura?: number
    Titulo: string
    Autor?: string | null
    Editorial: string
    Anno_de_Publicacion?: number | null
    Disponibilidad?: boolean | null
  }

  export type LibrosUpdateManyMutationInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Autor?: NullableStringFieldUpdateOperationsInput | string | null
    Editorial?: StringFieldUpdateOperationsInput | string
    Anno_de_Publicacion?: NullableIntFieldUpdateOperationsInput | number | null
    Disponibilidad?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type LibrosUncheckedUpdateManyInput = {
    Sinatura?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Autor?: NullableStringFieldUpdateOperationsInput | string | null
    Editorial?: StringFieldUpdateOperationsInput | string
    Anno_de_Publicacion?: NullableIntFieldUpdateOperationsInput | number | null
    Disponibilidad?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PedidosCreateInput = {
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
    Libros: LibrosCreateNestedOneWithoutPedidosInput
    Usuario: UsuarioCreateNestedOneWithoutPedidosInput
  }

  export type PedidosUncheckedCreateInput = {
    Id?: number
    Id_Usuario: number
    Libro_prestado: number
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
  }

  export type PedidosUpdateInput = {
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
    Libros?: LibrosUpdateOneRequiredWithoutPedidosNestedInput
    Usuario?: UsuarioUpdateOneRequiredWithoutPedidosNestedInput
  }

  export type PedidosUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Id_Usuario?: IntFieldUpdateOperationsInput | number
    Libro_prestado?: IntFieldUpdateOperationsInput | number
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidosCreateManyInput = {
    Id?: number
    Id_Usuario: number
    Libro_prestado: number
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
  }

  export type PedidosUpdateManyMutationInput = {
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidosUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Id_Usuario?: IntFieldUpdateOperationsInput | number
    Libro_prestado?: IntFieldUpdateOperationsInput | number
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateInput = {
    nombre: string
    apellidos: string
    DNI: string
    Telefono: number
    Fecha_de_alta: Date | string
    Clave_de_acceso: string
    Pedidos?: PedidosCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    Id?: number
    nombre: string
    apellidos: string
    DNI: string
    Telefono: number
    Fecha_de_alta: Date | string
    Clave_de_acceso: string
    Pedidos?: PedidosUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    DNI?: StringFieldUpdateOperationsInput | string
    Telefono?: IntFieldUpdateOperationsInput | number
    Fecha_de_alta?: DateTimeFieldUpdateOperationsInput | Date | string
    Clave_de_acceso?: StringFieldUpdateOperationsInput | string
    Pedidos?: PedidosUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    DNI?: StringFieldUpdateOperationsInput | string
    Telefono?: IntFieldUpdateOperationsInput | number
    Fecha_de_alta?: DateTimeFieldUpdateOperationsInput | Date | string
    Clave_de_acceso?: StringFieldUpdateOperationsInput | string
    Pedidos?: PedidosUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    Id?: number
    nombre: string
    apellidos: string
    DNI: string
    Telefono: number
    Fecha_de_alta: Date | string
    Clave_de_acceso: string
  }

  export type UsuarioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    DNI?: StringFieldUpdateOperationsInput | string
    Telefono?: IntFieldUpdateOperationsInput | number
    Fecha_de_alta?: DateTimeFieldUpdateOperationsInput | Date | string
    Clave_de_acceso?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    DNI?: StringFieldUpdateOperationsInput | string
    Telefono?: IntFieldUpdateOperationsInput | number
    Fecha_de_alta?: DateTimeFieldUpdateOperationsInput | Date | string
    Clave_de_acceso?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type PedidosListRelationFilter = {
    every?: PedidosWhereInput
    some?: PedidosWhereInput
    none?: PedidosWhereInput
  }

  export type PedidosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibrosCountOrderByAggregateInput = {
    Sinatura?: SortOrder
    Titulo?: SortOrder
    Autor?: SortOrder
    Editorial?: SortOrder
    Anno_de_Publicacion?: SortOrder
    Disponibilidad?: SortOrder
  }

  export type LibrosAvgOrderByAggregateInput = {
    Sinatura?: SortOrder
    Anno_de_Publicacion?: SortOrder
  }

  export type LibrosMaxOrderByAggregateInput = {
    Sinatura?: SortOrder
    Titulo?: SortOrder
    Autor?: SortOrder
    Editorial?: SortOrder
    Anno_de_Publicacion?: SortOrder
    Disponibilidad?: SortOrder
  }

  export type LibrosMinOrderByAggregateInput = {
    Sinatura?: SortOrder
    Titulo?: SortOrder
    Autor?: SortOrder
    Editorial?: SortOrder
    Anno_de_Publicacion?: SortOrder
    Disponibilidad?: SortOrder
  }

  export type LibrosSumOrderByAggregateInput = {
    Sinatura?: SortOrder
    Anno_de_Publicacion?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type LibrosRelationFilter = {
    is?: LibrosWhereInput
    isNot?: LibrosWhereInput
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type PedidosCountOrderByAggregateInput = {
    Id?: SortOrder
    Id_Usuario?: SortOrder
    Libro_prestado?: SortOrder
    Fecha_Pedido?: SortOrder
    Fecha_Devolucion?: SortOrder
  }

  export type PedidosAvgOrderByAggregateInput = {
    Id?: SortOrder
    Id_Usuario?: SortOrder
    Libro_prestado?: SortOrder
  }

  export type PedidosMaxOrderByAggregateInput = {
    Id?: SortOrder
    Id_Usuario?: SortOrder
    Libro_prestado?: SortOrder
    Fecha_Pedido?: SortOrder
    Fecha_Devolucion?: SortOrder
  }

  export type PedidosMinOrderByAggregateInput = {
    Id?: SortOrder
    Id_Usuario?: SortOrder
    Libro_prestado?: SortOrder
    Fecha_Pedido?: SortOrder
    Fecha_Devolucion?: SortOrder
  }

  export type PedidosSumOrderByAggregateInput = {
    Id?: SortOrder
    Id_Usuario?: SortOrder
    Libro_prestado?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UsuarioCountOrderByAggregateInput = {
    Id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    DNI?: SortOrder
    Telefono?: SortOrder
    Fecha_de_alta?: SortOrder
    Clave_de_acceso?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    Id?: SortOrder
    Telefono?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    Id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    DNI?: SortOrder
    Telefono?: SortOrder
    Fecha_de_alta?: SortOrder
    Clave_de_acceso?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    Id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    DNI?: SortOrder
    Telefono?: SortOrder
    Fecha_de_alta?: SortOrder
    Clave_de_acceso?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    Id?: SortOrder
    Telefono?: SortOrder
  }

  export type PedidosCreateNestedManyWithoutLibrosInput = {
    create?: XOR<Enumerable<PedidosCreateWithoutLibrosInput>, Enumerable<PedidosUncheckedCreateWithoutLibrosInput>>
    connectOrCreate?: Enumerable<PedidosCreateOrConnectWithoutLibrosInput>
    createMany?: PedidosCreateManyLibrosInputEnvelope
    connect?: Enumerable<PedidosWhereUniqueInput>
  }

  export type PedidosUncheckedCreateNestedManyWithoutLibrosInput = {
    create?: XOR<Enumerable<PedidosCreateWithoutLibrosInput>, Enumerable<PedidosUncheckedCreateWithoutLibrosInput>>
    connectOrCreate?: Enumerable<PedidosCreateOrConnectWithoutLibrosInput>
    createMany?: PedidosCreateManyLibrosInputEnvelope
    connect?: Enumerable<PedidosWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type PedidosUpdateManyWithoutLibrosNestedInput = {
    create?: XOR<Enumerable<PedidosCreateWithoutLibrosInput>, Enumerable<PedidosUncheckedCreateWithoutLibrosInput>>
    connectOrCreate?: Enumerable<PedidosCreateOrConnectWithoutLibrosInput>
    upsert?: Enumerable<PedidosUpsertWithWhereUniqueWithoutLibrosInput>
    createMany?: PedidosCreateManyLibrosInputEnvelope
    set?: Enumerable<PedidosWhereUniqueInput>
    disconnect?: Enumerable<PedidosWhereUniqueInput>
    delete?: Enumerable<PedidosWhereUniqueInput>
    connect?: Enumerable<PedidosWhereUniqueInput>
    update?: Enumerable<PedidosUpdateWithWhereUniqueWithoutLibrosInput>
    updateMany?: Enumerable<PedidosUpdateManyWithWhereWithoutLibrosInput>
    deleteMany?: Enumerable<PedidosScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PedidosUncheckedUpdateManyWithoutLibrosNestedInput = {
    create?: XOR<Enumerable<PedidosCreateWithoutLibrosInput>, Enumerable<PedidosUncheckedCreateWithoutLibrosInput>>
    connectOrCreate?: Enumerable<PedidosCreateOrConnectWithoutLibrosInput>
    upsert?: Enumerable<PedidosUpsertWithWhereUniqueWithoutLibrosInput>
    createMany?: PedidosCreateManyLibrosInputEnvelope
    set?: Enumerable<PedidosWhereUniqueInput>
    disconnect?: Enumerable<PedidosWhereUniqueInput>
    delete?: Enumerable<PedidosWhereUniqueInput>
    connect?: Enumerable<PedidosWhereUniqueInput>
    update?: Enumerable<PedidosUpdateWithWhereUniqueWithoutLibrosInput>
    updateMany?: Enumerable<PedidosUpdateManyWithWhereWithoutLibrosInput>
    deleteMany?: Enumerable<PedidosScalarWhereInput>
  }

  export type LibrosCreateNestedOneWithoutPedidosInput = {
    create?: XOR<LibrosCreateWithoutPedidosInput, LibrosUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: LibrosCreateOrConnectWithoutPedidosInput
    connect?: LibrosWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutPedidosInput = {
    create?: XOR<UsuarioCreateWithoutPedidosInput, UsuarioUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPedidosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LibrosUpdateOneRequiredWithoutPedidosNestedInput = {
    create?: XOR<LibrosCreateWithoutPedidosInput, LibrosUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: LibrosCreateOrConnectWithoutPedidosInput
    upsert?: LibrosUpsertWithoutPedidosInput
    connect?: LibrosWhereUniqueInput
    update?: XOR<LibrosUpdateWithoutPedidosInput, LibrosUncheckedUpdateWithoutPedidosInput>
  }

  export type UsuarioUpdateOneRequiredWithoutPedidosNestedInput = {
    create?: XOR<UsuarioCreateWithoutPedidosInput, UsuarioUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPedidosInput
    upsert?: UsuarioUpsertWithoutPedidosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutPedidosInput, UsuarioUncheckedUpdateWithoutPedidosInput>
  }

  export type PedidosCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<PedidosCreateWithoutUsuarioInput>, Enumerable<PedidosUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<PedidosCreateOrConnectWithoutUsuarioInput>
    createMany?: PedidosCreateManyUsuarioInputEnvelope
    connect?: Enumerable<PedidosWhereUniqueInput>
  }

  export type PedidosUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<PedidosCreateWithoutUsuarioInput>, Enumerable<PedidosUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<PedidosCreateOrConnectWithoutUsuarioInput>
    createMany?: PedidosCreateManyUsuarioInputEnvelope
    connect?: Enumerable<PedidosWhereUniqueInput>
  }

  export type PedidosUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<PedidosCreateWithoutUsuarioInput>, Enumerable<PedidosUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<PedidosCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<PedidosUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: PedidosCreateManyUsuarioInputEnvelope
    set?: Enumerable<PedidosWhereUniqueInput>
    disconnect?: Enumerable<PedidosWhereUniqueInput>
    delete?: Enumerable<PedidosWhereUniqueInput>
    connect?: Enumerable<PedidosWhereUniqueInput>
    update?: Enumerable<PedidosUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<PedidosUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<PedidosScalarWhereInput>
  }

  export type PedidosUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<PedidosCreateWithoutUsuarioInput>, Enumerable<PedidosUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<PedidosCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<PedidosUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: PedidosCreateManyUsuarioInputEnvelope
    set?: Enumerable<PedidosWhereUniqueInput>
    disconnect?: Enumerable<PedidosWhereUniqueInput>
    delete?: Enumerable<PedidosWhereUniqueInput>
    connect?: Enumerable<PedidosWhereUniqueInput>
    update?: Enumerable<PedidosUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<PedidosUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<PedidosScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type PedidosCreateWithoutLibrosInput = {
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
    Usuario: UsuarioCreateNestedOneWithoutPedidosInput
  }

  export type PedidosUncheckedCreateWithoutLibrosInput = {
    Id?: number
    Id_Usuario: number
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
  }

  export type PedidosCreateOrConnectWithoutLibrosInput = {
    where: PedidosWhereUniqueInput
    create: XOR<PedidosCreateWithoutLibrosInput, PedidosUncheckedCreateWithoutLibrosInput>
  }

  export type PedidosCreateManyLibrosInputEnvelope = {
    data: Enumerable<PedidosCreateManyLibrosInput>
    skipDuplicates?: boolean
  }

  export type PedidosUpsertWithWhereUniqueWithoutLibrosInput = {
    where: PedidosWhereUniqueInput
    update: XOR<PedidosUpdateWithoutLibrosInput, PedidosUncheckedUpdateWithoutLibrosInput>
    create: XOR<PedidosCreateWithoutLibrosInput, PedidosUncheckedCreateWithoutLibrosInput>
  }

  export type PedidosUpdateWithWhereUniqueWithoutLibrosInput = {
    where: PedidosWhereUniqueInput
    data: XOR<PedidosUpdateWithoutLibrosInput, PedidosUncheckedUpdateWithoutLibrosInput>
  }

  export type PedidosUpdateManyWithWhereWithoutLibrosInput = {
    where: PedidosScalarWhereInput
    data: XOR<PedidosUpdateManyMutationInput, PedidosUncheckedUpdateManyWithoutPedidosInput>
  }

  export type PedidosScalarWhereInput = {
    AND?: Enumerable<PedidosScalarWhereInput>
    OR?: Enumerable<PedidosScalarWhereInput>
    NOT?: Enumerable<PedidosScalarWhereInput>
    Id?: IntFilter | number
    Id_Usuario?: IntFilter | number
    Libro_prestado?: IntFilter | number
    Fecha_Pedido?: DateTimeFilter | Date | string
    Fecha_Devolucion?: DateTimeFilter | Date | string
  }

  export type LibrosCreateWithoutPedidosInput = {
    Titulo: string
    Autor?: string | null
    Editorial: string
    Anno_de_Publicacion?: number | null
    Disponibilidad?: boolean | null
  }

  export type LibrosUncheckedCreateWithoutPedidosInput = {
    Sinatura?: number
    Titulo: string
    Autor?: string | null
    Editorial: string
    Anno_de_Publicacion?: number | null
    Disponibilidad?: boolean | null
  }

  export type LibrosCreateOrConnectWithoutPedidosInput = {
    where: LibrosWhereUniqueInput
    create: XOR<LibrosCreateWithoutPedidosInput, LibrosUncheckedCreateWithoutPedidosInput>
  }

  export type UsuarioCreateWithoutPedidosInput = {
    nombre: string
    apellidos: string
    DNI: string
    Telefono: number
    Fecha_de_alta: Date | string
    Clave_de_acceso: string
  }

  export type UsuarioUncheckedCreateWithoutPedidosInput = {
    Id?: number
    nombre: string
    apellidos: string
    DNI: string
    Telefono: number
    Fecha_de_alta: Date | string
    Clave_de_acceso: string
  }

  export type UsuarioCreateOrConnectWithoutPedidosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutPedidosInput, UsuarioUncheckedCreateWithoutPedidosInput>
  }

  export type LibrosUpsertWithoutPedidosInput = {
    update: XOR<LibrosUpdateWithoutPedidosInput, LibrosUncheckedUpdateWithoutPedidosInput>
    create: XOR<LibrosCreateWithoutPedidosInput, LibrosUncheckedCreateWithoutPedidosInput>
  }

  export type LibrosUpdateWithoutPedidosInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Autor?: NullableStringFieldUpdateOperationsInput | string | null
    Editorial?: StringFieldUpdateOperationsInput | string
    Anno_de_Publicacion?: NullableIntFieldUpdateOperationsInput | number | null
    Disponibilidad?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type LibrosUncheckedUpdateWithoutPedidosInput = {
    Sinatura?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Autor?: NullableStringFieldUpdateOperationsInput | string | null
    Editorial?: StringFieldUpdateOperationsInput | string
    Anno_de_Publicacion?: NullableIntFieldUpdateOperationsInput | number | null
    Disponibilidad?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UsuarioUpsertWithoutPedidosInput = {
    update: XOR<UsuarioUpdateWithoutPedidosInput, UsuarioUncheckedUpdateWithoutPedidosInput>
    create: XOR<UsuarioCreateWithoutPedidosInput, UsuarioUncheckedCreateWithoutPedidosInput>
  }

  export type UsuarioUpdateWithoutPedidosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    DNI?: StringFieldUpdateOperationsInput | string
    Telefono?: IntFieldUpdateOperationsInput | number
    Fecha_de_alta?: DateTimeFieldUpdateOperationsInput | Date | string
    Clave_de_acceso?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateWithoutPedidosInput = {
    Id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    DNI?: StringFieldUpdateOperationsInput | string
    Telefono?: IntFieldUpdateOperationsInput | number
    Fecha_de_alta?: DateTimeFieldUpdateOperationsInput | Date | string
    Clave_de_acceso?: StringFieldUpdateOperationsInput | string
  }

  export type PedidosCreateWithoutUsuarioInput = {
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
    Libros: LibrosCreateNestedOneWithoutPedidosInput
  }

  export type PedidosUncheckedCreateWithoutUsuarioInput = {
    Id?: number
    Libro_prestado: number
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
  }

  export type PedidosCreateOrConnectWithoutUsuarioInput = {
    where: PedidosWhereUniqueInput
    create: XOR<PedidosCreateWithoutUsuarioInput, PedidosUncheckedCreateWithoutUsuarioInput>
  }

  export type PedidosCreateManyUsuarioInputEnvelope = {
    data: Enumerable<PedidosCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type PedidosUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: PedidosWhereUniqueInput
    update: XOR<PedidosUpdateWithoutUsuarioInput, PedidosUncheckedUpdateWithoutUsuarioInput>
    create: XOR<PedidosCreateWithoutUsuarioInput, PedidosUncheckedCreateWithoutUsuarioInput>
  }

  export type PedidosUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: PedidosWhereUniqueInput
    data: XOR<PedidosUpdateWithoutUsuarioInput, PedidosUncheckedUpdateWithoutUsuarioInput>
  }

  export type PedidosUpdateManyWithWhereWithoutUsuarioInput = {
    where: PedidosScalarWhereInput
    data: XOR<PedidosUpdateManyMutationInput, PedidosUncheckedUpdateManyWithoutPedidosInput>
  }

  export type PedidosCreateManyLibrosInput = {
    Id?: number
    Id_Usuario: number
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
  }

  export type PedidosUpdateWithoutLibrosInput = {
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
    Usuario?: UsuarioUpdateOneRequiredWithoutPedidosNestedInput
  }

  export type PedidosUncheckedUpdateWithoutLibrosInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Id_Usuario?: IntFieldUpdateOperationsInput | number
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidosUncheckedUpdateManyWithoutPedidosInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Id_Usuario?: IntFieldUpdateOperationsInput | number
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidosCreateManyUsuarioInput = {
    Id?: number
    Libro_prestado: number
    Fecha_Pedido: Date | string
    Fecha_Devolucion: Date | string
  }

  export type PedidosUpdateWithoutUsuarioInput = {
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
    Libros?: LibrosUpdateOneRequiredWithoutPedidosNestedInput
  }

  export type PedidosUncheckedUpdateWithoutUsuarioInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Libro_prestado?: IntFieldUpdateOperationsInput | number
    Fecha_Pedido?: DateTimeFieldUpdateOperationsInput | Date | string
    Fecha_Devolucion?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}